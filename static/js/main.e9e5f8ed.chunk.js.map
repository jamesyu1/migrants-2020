{"version":3,"sources":["useData.js","BubbleMap/Marks.js","BubbleMap/index.js","DateHistogram/AxisBottom.js","DateHistogram/AxisLeft.js","DateHistogram/Marks.js","DateHistogram/index.js","index.js","useWorldAtlas.js"],"names":["row","d","coords","split","map","reverse","Date","projection","geoNaturalEarth1","graticule","geoGraticule","Marks","worldAtlas","land","interiors","data","width","height","sizeScale","sizeValue","path","geoPath","fitSize","className","useMemo","console","log","type","features","feature","x","y","cx","cy","r","BubbleMap","filteredData","scaleSqrt","domain","max","range","AxisBottom","xScale","innerHeight","tickFormat","tickOffset","ticks","tickValue","transform","x1","y1","x2","y2","dy","style","textAnchor","AxisLeft","yScale","innerWidth","binnedData","tooltipFormat","x0","margin","xAxisTickFormat","timeFormat","yValue","DateHistogram","setBrushExtent","xValue","scaleTime","extent","nice","start","stop","bin","value","thresholds","timeMonths","array","sum","scaleLinear","brushRef","useRef","useEffect","brush","brushX","select","current","on","event","selection","invert","fill","ref","window","App","useState","setData","json","then","topology","objects","countries","mesh","a","b","useWorldAtlas","csv","useData","brushExtent","filter","date","class","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e9e5f8ed.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nconst csvUrl =\n  'https://gist.githubusercontent.com/curran/a9656d711a8ad31d812b8f9963ac441c/raw/c22144062566de911ba32509613c84af2a99e8e2/MissingMigrants-Global-2019-10-08T09-47-14-subset.csv';\n\nconst row = d => {\n  d.coords = d[\"Location Coordinates\"].split(\",\").map(d => +d).reverse();\n  d['Total Dead and Missing'] = +d['Total Dead and Missing'];\n  d['Reported Date'] = new Date(d['Reported Date']);\n  return d;\n};\n\nexport const useData = () => {\n  const [data, setData] = useState(null);\n\n  // make use of useEffect hook to make React do something just once\n  // first argument is a function\n  // second argument is an array of dependencies - set to null so it doesnt rerun\n  useEffect(() => {\n    csv(csvUrl, row).then(setData);\n  }, []);\n\n  return data;\n}","import { geoNaturalEarth1, geoPath, geoGraticule } from 'd3';\nimport { useMemo } from 'react';\n\nconst projection = geoNaturalEarth1();\nconst graticule = geoGraticule();\n\nexport const Marks = ({\n  worldAtlas: {land, interiors},\n  data,\n  width,\n  height,\n  sizeScale,\n  sizeValue\n}) => {\n  const path = geoPath(projection.fitSize([width, height], land));\n\n  return (\n    <g className=\"marks\">\n      { useMemo(() => {\n        console.log('rendering map');\n        return <>\n          <path className=\"sphere\" d={path({type: 'Sphere'})} />\n\n          <path className=\"graticules\" d={path(graticule())} />\n\n          {land.features.map(feature => (\n            <path className=\"land\" d={path(feature)} />\n          ))}\n\n          <path className=\"interiors\" d={path(interiors)} />\n        </>\n        },\n        // [path, graticule, land, interiors]\n        [graticule, land, interiors]\n        )\n      }\n\n      {data.map(d => {\n        const [x, y] = projection(d.coords);\n        return <circle cx={x} cy={y} r={sizeScale(sizeValue(d))} />\n      })}\n    </g>\n  )\n};","import { useMemo } from 'react';\nimport { Marks } from './Marks';\nimport { max, scaleSqrt } from 'd3';\n\nconst sizeValue = d => d['Total Dead and Missing'];\nconst maxRadius = 25;\n\nexport const BubbleMap = ({data, filteredData, worldAtlas, width, height}) => {\n\n  const sizeScale = useMemo(() => \n    scaleSqrt()\n      .domain([0, max(data, sizeValue)])\n      .range([0, maxRadius]),\n    [data, sizeValue, maxRadius]\n  );\n\n  return (\n    <Marks \n      worldAtlas={worldAtlas}\n      data={filteredData}\n      width={width}\n      height={height}\n      sizeScale={sizeScale}\n      sizeValue={sizeValue}\n    />\n  );\n}","export const AxisBottom = ({xScale, innerHeight, tickFormat, tickOffset = 3}) => \n  xScale.ticks().map(tickValue => (\n    <g className=\"tick\" key={tickValue} transform={`translate(${xScale(tickValue)}, 0)`}>\n      <line x1={0} y1={0} x2={0} y2={innerHeight} />\n      <text dy=\".71em\" style={{textAnchor: 'middle'}} y={innerHeight + tickOffset}>\n        {tickFormat(tickValue)}\n      </text>\n    </g>\n  ))","export const AxisLeft = ({yScale, innerWidth, tickOffset = 3}) => \n  yScale.ticks().map(tickValue => (\n    <g \n      className=\"tick\" \n      key={tickValue} \n      transform={`translate(0, ${yScale(tickValue)})`}\n    >\n      <line x1={0} y1={0} x2={innerWidth} y2={0} />\n      <text dy=\".42em\" x={-tickOffset} style={{textAnchor: 'end'}}>\n        {tickValue}\n      </text>\n    </g>\n  ))","export const Marks = ({\n  binnedData, \n  xScale, \n  yScale,\n  tooltipFormat,\n  innerHeight\n}) => (\n  binnedData.map(d => (\n    <g className=\"marks\">\n      <rect\n        x={xScale(d.x0)} \n        y={yScale(d.y)}\n        width={xScale(d.x1) - xScale(d.x0)}\n        height={innerHeight - yScale(d.y)}\n      >\n        <title>{tooltipFormat(d.y)}</title>\n      </rect>\n\n    </g>\n  ))\n)","import { scaleLinear, scaleTime, extent, timeFormat, bin, timeMonths, sum, max, brushX, select } from 'd3';\nimport { useRef, useEffect, useMemo } from 'react';\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { Marks } from './Marks';\n\n// these attributes will not be redefined every render\n\n// const height = 100;\nconst margin = { top: 0, bottom: 20, left: 50, right: 30 };\nconst xAxisLabelOffset = 50;\nconst yAxisLabelOffset = 35;\nconst xAxisTickFormat = timeFormat(\"%Y-%m-%d\"); \n\nconst yValue = d => d['Total Dead and Missing'];\n\nconst yAxisLabel = 'Total Dead and Missing';\nconst xAxisLabel = 'Date';\n\nexport const DateHistogram = ({data, width, height, setBrushExtent, xValue}) => {\n\n\tconst innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width - margin.left - margin.right;  \n\n  const xScale = useMemo(\n    () => \n      scaleTime()\n        .domain(extent(data, xValue))\n        .range([0, innerWidth])\n        .nice(), \n    [data, xValue, innerWidth]\n  );\n\n  const binnedData = useMemo(() => {\n    const [start, stop] = xScale.domain(); // destructuring syntax to unpack array of two elements\n    return bin()\n      .value(xValue)\n      .domain(xScale.domain())\n      .thresholds(timeMonths(start, stop))\n      (data)\n      .map(array => ({\n        x0: array.x0,\n        x1: array.x1,\n        y: sum(array, yValue)\n      }))\n    }, \n    [xValue, xScale, data, yValue]\n  );\n\n  const yScale = useMemo(() => \n    scaleLinear()\n      .domain([0, max(binnedData, d => d.y)])\n      .range([innerHeight, 0])\n      .nice(), // make scale terminate at \"nice\" numbers to fit all data points\n    [binnedData, innerHeight]\n  );\n\n  const brushRef = useRef(); // react ref allows us to access raw dom element, which is exposed to us as brushRef.current\n\n  // useEffect is only executed when rendering is complete, so dom elements are available\n  // so brushRef.current would not be undefined\n  useEffect(() => {\n    const brush = brushX().extent([[0, 0], [innerWidth, innerHeight]]);\n    brush(select(brushRef.current)); // set up brush by invoking brush as a function with d3 selection of g element\n    brush.on('brush end', (event) => { // 'brush' and 'end' are events, second argument is a event listener\n      setBrushExtent(event.selection ? event.selection.map(xScale.invert) : null); // .invert method accepts range and outputs domain\n    });\n  }, [innerWidth, innerHeight]); // each time these dependencies change, the effect is executed again\n\n  return (\n    <>\n      <rect width={width} height={height} fill='white' />\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n\n        <AxisBottom \n          xScale={xScale} \n          innerHeight={innerHeight} \n          tickFormat={xAxisTickFormat}\n          tickOffset={8} \n        />\n\n        <AxisLeft \n          yScale={yScale}\n          innerWidth={innerWidth}\n          tickOffset={8}\n        />\n\n        <Marks \n          binnedData={binnedData} \n          xScale={xScale} \n          yScale={yScale}\n          tooltipFormat={d => d}\n          innerHeight={innerHeight}\n        />\n\n        <text \n          className=\"axis-label\" \n          x={innerWidth/2} \n          y={innerHeight+xAxisLabelOffset} \n          textAnchor=\"middle\"\n        >\n          {xAxisLabel}\n        </text>\n\n        <text \n          className=\"axis-label\" \n          textAnchor=\"middle\"\n          transform={`translate(${-yAxisLabelOffset}, ${innerHeight/2}) rotate(-90)`}\n        >\n          {yAxisLabel}\n        </text>\n\n        <g ref={brushRef} />\n\n      </g>\n    </>\n  )\n} ","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n// import { scaleLinear, scaleTime, extent, timeFormat } from 'd3';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport { useData } from './useData';\nimport { BubbleMap } from './BubbleMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\nconst dateHistogramSize = 0.25;\n\nconst xValue = d => d['Reported Date'];\n\nconst App = () => {\n  const worldAtlas = useWorldAtlas();\n  const data = useData();\n\n  const [brushExtent, setBrushExtent] = useState();\n\n  if (!worldAtlas || !data) {\n    return <pre>Loading...</pre>;\n  }\n\n  const filteredData = brushExtent ? data.filter(d => {\n    const date = xValue(d);\n    return date > brushExtent[0] && date < brushExtent[1];\n  }) : data;\n  \n  return (\n    <div class=\"container\">\n      <svg \n        width={width} height={height}\n      >\n        <BubbleMap \n          data={data}\n          filteredData={filteredData} \n          worldAtlas={worldAtlas}\n          width={width}\n          height={height}\n        />\n        <g transform={`translate(0, ${height - height*dateHistogramSize})`}>\n          <DateHistogram data={data} width={width} height={height*dateHistogramSize} setBrushExtent={setBrushExtent} xValue={xValue}/>\n        </g>\n      </svg>\n      <div class=\"title-text\">\n        <text>Cast Out</text>\n      </div>\n      <div class=\"subtitle-text\">\n        <text>Missing migrants and their origins. Brush to select a time period in the chart, drag to see changes over time</text>\n      </div>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\n\n\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import React, { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonUrl =\n  'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  // hook to make React do something just once\n  // first argument is a function\n  // second argument is an array of dependencies\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const { countries, land } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a,b) => a !== b)\n\n      });\n    });\n  }, []);\n\n  return data;\n}"],"sourceRoot":""}